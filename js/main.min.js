// Intersection Observer for scroll animations
const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
        }
    });
}, {
    threshold: 0.1
});

// Observe project cards
document.querySelectorAll('.project-card').forEach((card, index) => {
    card.style.animationDelay = `${index * 0.2}s`;
    observer.observe(card);
});

// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Optimized mouse cursor effect
let cursorThrottle;
document.addEventListener('mousemove', (e) => {
    if (cursorThrottle) return;
    
    cursorThrottle = setTimeout(() => {
        const cursor = document.createElement('div');
        cursor.style.cssText = `
            position: fixed;
            left: ${e.clientX}px;
            top: ${e.clientY}px;
            width: 10px;
            height: 10px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            pointer-events: none;
            z-index: 9999;
            transform: scale(1);
            opacity: 1;
            transition: all 1s ease-out;
            will-change: transform, opacity;
        `;
        document.body.appendChild(cursor);

        requestAnimationFrame(() => {
            cursor.style.transform = 'scale(2)';
            cursor.style.opacity = '0';
        });

        setTimeout(() => {
            if (cursor.parentNode) cursor.remove();
        }, 1000);
        
        cursorThrottle = null;
    }, 50);
});

// Optimized ripple effect function
function createRipple(event) {
    const button = event.currentTarget;
    
    // Remove existing ripple efficiently
    const existingRipple = button.querySelector('.ripple');
    if (existingRipple) {
        existingRipple.style.opacity = '0';
        setTimeout(() => {
            if (existingRipple.parentNode) existingRipple.remove();
        }, 100);
    }

    const circle = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;
    const x = event.clientX - rect.left - radius;
    const y = event.clientY - rect.top - radius;

    circle.style.cssText = `
        position: absolute;
        left: ${x}px;
        top: ${y}px;
        width: ${diameter}px;
        height: ${diameter}px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.6);
        transform: scale(0);
        pointer-events: none;
        animation: ripple 0.6s ease-out;
        will-change: transform;
    `;
    
    circle.className = 'ripple';
    
    // Ensure button positioning without layout shift
    const buttonStyle = getComputedStyle(button);
    if (buttonStyle.position === 'static') {
        button.style.position = 'relative';
        button.style.overflow = 'hidden';
    }
    
    button.appendChild(circle);
    
    setTimeout(() => {
        if (circle.parentNode) circle.remove();
    }, 600);
}

// Debounced and optimized click handler
let clickDebounce;
document.addEventListener('click', (e) => {
    if (clickDebounce) clearTimeout(clickDebounce);
    
    clickDebounce = setTimeout(() => {
        const target = e.target;
        
        // Ripple effect
        const closestButton = target.closest('.btn-base, .cta-button, .project-link');
        if (closestButton) {
            createRipple({ ...e, currentTarget: closestButton });
        }

        // Modal close
        if (target.classList.contains('modal') && !isDragging) {
            closeModal(target.id);
        }

        // Download button with layout shift prevention
        const downloadBtn = target.closest('.btn-download');
        if (downloadBtn && !downloadBtn.dataset.loading) {
            downloadBtn.dataset.loading = 'true';
            const originalWidth = downloadBtn.offsetWidth;
            downloadBtn.style.minWidth = originalWidth + 'px';
            downloadBtn.classList.add('btn-loading');
            
            setTimeout(() => {
                downloadBtn.classList.remove('btn-loading');
                downloadBtn.style.minWidth = '';
                delete downloadBtn.dataset.loading;
            }, 2000);
        }

        // View button with layout shift prevention
        const viewBtn = target.closest('.btn-view');
        if (viewBtn && !viewBtn.dataset.processing) {
            viewBtn.dataset.processing = 'true';
            const originalText = viewBtn.innerHTML;
            const originalWidth = viewBtn.offsetWidth;
            viewBtn.style.minWidth = originalWidth + 'px';
            
            setTimeout(() => {
                viewBtn.innerHTML = '<span class="btn-icon">âœ…</span>Opening...';
                setTimeout(() => {
                    viewBtn.innerHTML = originalText;
                    viewBtn.style.minWidth = '';
                    delete viewBtn.dataset.processing;
                }, 1500);
            }, 100);
        }
    }, 16); // ~60fps debounce
});

// Optimized touch support
document.addEventListener('touchstart', (e) => {
    if (e.touches.length === 1) {
        const target = e.target;
        const closestButton = target.closest('.btn-base, .cta-button, .project-link');
        
        if (closestButton) {
            const touch = e.touches[0];
            createRipple({
                clientX: touch.clientX,
                clientY: touch.clientY,
                currentTarget: closestButton
            });
        }
    }
}, { passive: true });

// Swiper
let isDragging = false;
let swiperInstance = null;

const initSwiper = () => {
    if (swiperInstance) return;
    swiperInstance = new Swiper(".mySwiper", {
        freeMode: {
            enabled: true,
            sticky: true,
        },
        slidesPerView: 1,
        spaceBetween: 20,
        grabCursor: true,
        pagination: {
            el: ".swiper-pagination",
            clickable: true,
        },
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        on: {
            touchMove: () => { isDragging = true; },
            touchEnd: () => { 
                setTimeout(() => { isDragging = false; }, 50); 
            }
        }
    });
};

// Modal functionality
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    if (modalId.includes('social-network-modal') && !swiperInstance) {
        requestIdleCallback(() => initSwiper());
    }

    modal.style.display = 'block';
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';

    requestAnimationFrame(() => {
        modal.classList.add('fade-in');
    });
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    modal.classList.remove('fade-in');
    modal.classList.add('fade-out');

    setTimeout(() => {
        modal.style.display = 'none';
        modal.classList.remove('show', 'fade-out');
        document.body.style.overflow = 'auto';
    }, 300);
}

// Initialize modals on DOM ready
document.addEventListener('DOMContentLoaded', function () {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
        modal.classList.remove('show', 'fade-in', 'fade-out');
    });
});

// Close modal with Escape key
document.addEventListener('keydown', function (event) {
    if (event.key === 'Escape') {
        const visibleModals = document.querySelectorAll('.modal.show');
        visibleModals.forEach(modal => {
            closeModal(modal.id);
        });
    }
});

// Optimized scroll-based animations
let scrollThrottle;
document.addEventListener('scroll', () => {
    if (scrollThrottle) return;
    
    scrollThrottle = requestAnimationFrame(() => {
        const scrolled = window.pageYOffset;
        const particles = document.querySelectorAll('.particle');
        
        particles.forEach((particle, index) => {
            const speed = 0.5 + (index * 0.1);
            particle.style.transform = `translate3d(0, ${scrolled * speed}px, 0)`;
        });
        
        scrollThrottle = null;
    });
}, { passive: true });

// Optimized header background change
let headerThrottle;
window.addEventListener('scroll', () => {
    if (headerThrottle) return;
    
    headerThrottle = requestAnimationFrame(() => {
        const scrollPercentage = window.pageYOffset / (document.body.offsetHeight - window.innerHeight);
        const header = document.querySelector('.header');

        if (header && scrollPercentage < 0.3) {
            const opacity = Math.max(0.3, 1 - scrollPercentage * 3);
            header.style.background = `linear-gradient(135deg, rgba(102, 126, 234, ${opacity}) 0%, rgba(118, 75, 162, ${opacity}) 100%)`;
        }
        
        headerThrottle = null;
    });
}, { passive: true });

// Typing animation
function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.innerHTML = '';

    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    type();
}

// Initialize typing animation
window.addEventListener('load', () => {
    const heroTitle = document.querySelector('.hero-title');
    if (heroTitle) {
        const originalText = heroTitle.textContent;
        requestIdleCallback(() => {
            typeWriter(heroTitle, originalText, 150);
        });
    }
});

// Project card hover effects
document.querySelectorAll('.project-card').forEach(card => {
    let hoverTimeout;
    
    card.addEventListener('mouseenter', function () {
        if (hoverTimeout) clearTimeout(hoverTimeout);
        this.style.transform = 'translate3d(0, -15px, 0) scale(1.02)';
        this.style.transition = 'transform 0.3s ease';
    });

    card.addEventListener('mouseleave', function () {
        hoverTimeout = setTimeout(() => {
            this.style.transform = 'translate3d(0, 0, 0) scale(1)';
        }, 50);
    });
});

// Skills animation
function animateSkillBars() {
    const skillCategories = document.querySelectorAll('.skill-category');
    skillCategories.forEach((category, index) => {
        setTimeout(() => {
            category.style.transform = 'translateY(0)';
            category.style.opacity = '1';
        }, index * 200);
    });
}

const skillsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            animateSkillBars();
            skillsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

const skillsSection = document.querySelector('.skills');
if (skillsSection) {
    skillsObserver.observe(skillsSection);
}

// Contact icons floating animation
document.querySelectorAll('.contact-icon').forEach((icon, index) => {
    icon.style.animation = `float 3s ease-in-out ${index * 0.5}s infinite`;
});

// Add required CSS for animations
const animationStyles = document.createElement('style');
animationStyles.textContent = `
    @keyframes ripple {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
    
    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }
    
    .btn-base, .cta-button, .project-link {
        overflow: hidden;
    }
`;
document.head.appendChild(animationStyles);